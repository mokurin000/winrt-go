// Code generated by winrt-go-gen. DO NOT EDIT.

//go:build windows

//nolint:all
package media

import (
	"syscall"
	"unsafe"

	"github.com/go-ole/go-ole"
	"github.com/saltosystems/winrt-go/windows/foundation/collections"
)

const SignatureVideoDisplayProperties string = "rc(Windows.Media.VideoDisplayProperties;{5609fdb1-5d2d-4872-8170-45dee5bc2f5c})"

type VideoDisplayProperties struct {
	ole.IUnknown
}

func (impl *VideoDisplayProperties) GetTitle() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiVideoDisplayProperties))
	defer itf.Release()
	v := (*iVideoDisplayProperties)(unsafe.Pointer(itf))
	return v.GetTitle()
}

func (impl *VideoDisplayProperties) SetTitle(value string) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiVideoDisplayProperties))
	defer itf.Release()
	v := (*iVideoDisplayProperties)(unsafe.Pointer(itf))
	return v.SetTitle(value)
}

func (impl *VideoDisplayProperties) GetSubtitle() (string, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiVideoDisplayProperties))
	defer itf.Release()
	v := (*iVideoDisplayProperties)(unsafe.Pointer(itf))
	return v.GetSubtitle()
}

func (impl *VideoDisplayProperties) SetSubtitle(value string) error {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiVideoDisplayProperties))
	defer itf.Release()
	v := (*iVideoDisplayProperties)(unsafe.Pointer(itf))
	return v.SetSubtitle(value)
}

func (impl *VideoDisplayProperties) GetGenres() (*collections.IVector, error) {
	itf := impl.MustQueryInterface(ole.NewGUID(GUIDiVideoDisplayProperties2))
	defer itf.Release()
	v := (*iVideoDisplayProperties2)(unsafe.Pointer(itf))
	return v.GetGenres()
}

const GUIDiVideoDisplayProperties string = "5609fdb1-5d2d-4872-8170-45dee5bc2f5c"
const SignatureiVideoDisplayProperties string = "{5609fdb1-5d2d-4872-8170-45dee5bc2f5c}"

type iVideoDisplayProperties struct {
	ole.IInspectable
}

type iVideoDisplayPropertiesVtbl struct {
	ole.IInspectableVtbl

	GetTitle    uintptr
	SetTitle    uintptr
	GetSubtitle uintptr
	SetSubtitle uintptr
}

func (v *iVideoDisplayProperties) VTable() *iVideoDisplayPropertiesVtbl {
	return (*iVideoDisplayPropertiesVtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iVideoDisplayProperties) GetTitle() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetTitle,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iVideoDisplayProperties) SetTitle(value string) error {
	valueHStr, err := ole.NewHString(value)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetTitle,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(valueHStr),         // in string
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

func (v *iVideoDisplayProperties) GetSubtitle() (string, error) {
	var outHStr ole.HString
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetSubtitle,
		uintptr(unsafe.Pointer(v)),        // this
		uintptr(unsafe.Pointer(&outHStr)), // out string
	)

	if hr != 0 {
		return "", ole.NewError(hr)
	}

	out := outHStr.String()
	ole.DeleteHString(outHStr)
	return out, nil
}

func (v *iVideoDisplayProperties) SetSubtitle(value string) error {
	valueHStr, err := ole.NewHString(value)
	if err != nil {
		return err
	}
	hr, _, _ := syscall.SyscallN(
		v.VTable().SetSubtitle,
		uintptr(unsafe.Pointer(v)), // this
		uintptr(valueHStr),         // in string
	)

	if hr != 0 {
		return ole.NewError(hr)
	}

	return nil
}

const GUIDiVideoDisplayProperties2 string = "b410e1ce-ab52-41ab-a486-cc10fab152f9"
const SignatureiVideoDisplayProperties2 string = "{b410e1ce-ab52-41ab-a486-cc10fab152f9}"

type iVideoDisplayProperties2 struct {
	ole.IInspectable
}

type iVideoDisplayProperties2Vtbl struct {
	ole.IInspectableVtbl

	GetGenres uintptr
}

func (v *iVideoDisplayProperties2) VTable() *iVideoDisplayProperties2Vtbl {
	return (*iVideoDisplayProperties2Vtbl)(unsafe.Pointer(v.RawVTable))
}

func (v *iVideoDisplayProperties2) GetGenres() (*collections.IVector, error) {
	var out *collections.IVector
	hr, _, _ := syscall.SyscallN(
		v.VTable().GetGenres,
		uintptr(unsafe.Pointer(v)),    // this
		uintptr(unsafe.Pointer(&out)), // out collections.IVector
	)

	if hr != 0 {
		return nil, ole.NewError(hr)
	}

	return out, nil
}
